/*#ifndef LISTAPECAS_H
#define LISTAPECAS_H*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Peca.h"

#define BUFFER 64

/* Estrutura da lista declarada para armazenar nossos dados. */
typedef struct lista {
        int *identificador;
        PecinhaAux *Pec;
        struct lista *proximo;
} Dados;

/* Prototipo das funcoes de manuseio dos dados. */
Dados *inicia_dados(int *identificador, PecinhaAux *Pecinha);
Dados *insere_dados(Dados *dados, int *identificador, PecinhaAux *Pecinha);
void exibe_dados(Dados *dados);
void busca_dados(Dados *dados, int *identificador);
Dados *deleta_dados(Dados *dados, int *identificador);
int checa_vazio(Dados *dados);

/* Prototipo das funcoes do menu.*/
void insere(void);
void exibe(void);
void busca(void);
void deleta(void);

/* Inicializa a estrutura de dados principal. */
Dados *principal = NULL;

/* Cria a nova lista apontando o proximo no para NULL. */
Dados *inicia_dados(int *identificador, PecinhaAux *Pecinha) {

        Dados *novo;

        novo = (Dados *)malloc(sizeof(Dados));
        novo->identificador = (int *)malloc(sizeof(identificador));
        novo->identificador=identificador;

	novo->Pec = Pecinha;
        novo->proximo = NULL;

        return novo;
}

/* Como a lista nao esta mais vazia, apontamos o proximo no para lista anterior. */
Dados *insere_dados(Dados *dados, int *identificador, PecinhaAux *Pecinha) {

        Dados *novo;

        novo = (Dados *)malloc(sizeof(Dados));
        novo->identificador = (int *)malloc(sizeof(identificador));
        novo->identificador=identificador;
        novo->Pec = Pecinha;
        novo->proximo = dados;

        return novo;
}

/* Percorre todos os campos da lista e imprime ate o ponteiro proximo chegar em NULL. */
void exibe_dados(Dados *dados) {

        fprintf(stdout, "Lista de Pecas:\\n\\n");

        fprintf(stdout, "------------------------\n");

        for (; dados != NULL; dados = dados->proximo) {
                fprintf(stdout, "Nome: %d\n", dados->identificador);
                fprintf(stdout, "------------------------\n");
        }

        getchar();
}

/* Percorre cada ponta comparando o nome com a chave. */
void busca_dados(Dados *dados, int *identifica) {

        int achou = 0;

        fprintf(stdout, "Lista de Pecas:\n\n");
        for (; dados != NULL; dados = dados->proximo) {
                if (identifica==dados->identificador) {

                        fprintf(stdout, "------------------------\n");
                        printf("Identificador: %d\n", dados->identificador);
                        fprintf(stdout, "------------------------\n");
                        achou++;
                }
        }

        if (achou == 0)
                fprintf(stdout, "Nenhum resultado encontrado.\n");
        else
                fprintf(stdout, "Foram encontrados %d registros.\n", achou);

        sleep(1);
}

/* Deleta o ultimo registro inserido. */
Dados *deleta_dados(Dados *dados, int *identifica) {

        for (; dados != NULL; dados = dados->proximo) {
                if (identifica==dados->identificador) {
			free(dados->identificador);
        		free(dados);
                }
        }

        fprintf(stdout, "O registro %d inserido foi deletado com sucesso.\n", identifica);
        sleep(1);

        return novo;
}

/* Apena checa se a lista e NULL ou nao. */
int checa_vazio(Dados *dados) {

        if (dados == NULL) {
                fprintf(stdout, "Lista vazia!\\n");
                sleep(1);
                return 1;
        } else
                return 0;
}

/* Obtem os dados necessarios para chamar as funcoes de manuseio de dados. */
void insere(void) {

        char *nome;
        int idade;

        nome = (char *)malloc(BUFFER);

        fprintf(stdout, "\n\nDigite o Identificador: \n----> ");
        scanf("%d", identificador);
        fprintf(stdout, "\n");

	struct PecinhaAux * auxiliarPecinha = 0;
     	auxiliarPecinha = (struct PecinhaAux *) malloc (sizeof(struct PecinhaAux));
     	if(!auxiliarPecinha) return;

        if (principal == NULL) 
                principal = inicia_dados(identificador, auxiliarPecinha);
        else 
                principal = insere_dados(principal, identificador, auxiliarPecinha);
}

void exibe(void) {

        if (!checa_vazio(principal))
                exibe_dados(principal);
}

void busca(void) {

        char *identificador;

        if (!checa_vazio(principal)) {

                identificador = (int *)malloc(BUFFER);

                fprintf(stdout, "Digite o identificador para buscar: \n--> ");
                scanf("%d", identificador);

                busca_dados(principal, identificador);
        }
}

void deleta(void) {

        if (!checa_vazio(principal))
                principal = deleta_dados(principal);
}

int main(void) {

        char escolha;

        do {
                system("/usr/bin/clear"); /* Nao lembro de nada melhor! :P  */
                fprintf(stdout, "\n\t\tCadastro de Pecas\n\n");
                fprintf(stdout, "Escolha uma opcao: \n");
                fprintf(stdout, "1 - Insere Dados\n");
                fprintf(stdout, "2 - Exibe Dados\n");
                fprintf(stdout, "3 - Busca Dados\n");
                fprintf(stdout, "4 - Deleta Dados\n");
                fprintf(stdout, "5 - Sair\n\n");

                scanf("%c", &escolha);

                switch(escolha) {
                        case '1':
                                insere();
                                break;

                        case '2':
                                exibe();
                                break;

                        case '3':
                                busca();
                                break;

                        case '4':
                                deleta();
                                break;

                        case '5':
                                exit(0);
                                break;

                        default:
                                fprintf(stderr,"Digite uma opcao valida!\n");
                                sleep(1);
                                break;
                }

                getchar(); /* E para impedir sujeira na entrada da escolha. Nao lembro de nada melhor tambem. :P  */
        }

        while (escolha > 0); /* Loop Principal. */

        return 0;
}

